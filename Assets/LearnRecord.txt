第八章 透明效果

	在unity中，通常两种方法实现透明效果：
		1、使用透明度测试--这个方式无法得到真正的透明效果 ，原理:将不满足条件的片元直接丢弃，可以实现空洞效果。
		2、透明度混合--这种方式 必须关闭深度写入，片元着色器，返回值的A=透明值*材质控制系数；原理：片元颜色和深度缓冲中的目标颜色 按照设置的混合方式 进行透明混合，
	深度缓冲(z-buffer)的基本思想？

		
		基本思想：
			将渲染的片元的深度值和深度缓冲中的值进行比较，如果他的值距离摄像机较远，就说明该片元不应该被渲染到屏幕上（有物体遮挡了它）。否则片元颜色覆盖掉颜色缓冲区
		的像素值，并把他的深度值更新到深度缓冲区中（如果开启了深度写入）
		深度缓冲可以让我们不用关心 不透明物体的渲染顺序，因为深度测试会判断出距离摄像机较远的物体，是不会写入到颜色缓冲中。

第九章	Unity的渲染路径
	渲染路径的种类：
		5.0之前，主要有三种：1、前向渲染（Forward Rendering Paht） 2、延迟渲染路径 (Deferred Rendering Path) 3、顶点照明渲染路径（Vertex Lit Rendering Path）
		5.0之后 ，首先 顶点照明渲染路径已经被抛弃，但对之前使用这个照明的shader仍是兼容的。 ，其次 新的延迟渲染路径 替代了原来的言辞渲染路径，目前也提供了对较旧版本的兼容
	渲染路径的选择
		大多情况下，一个项目只是用一种渲染路径，可以通过unity里面的相关步骤设置。
		有时我们想使用多个渲染路径，例如摄像机A使用前向渲染 摄像机B使用延迟渲染路径
		如果当前显卡不支持所选择的渲染路径，unity会自动降低更低一级的渲染路径
	前向渲染路径的原理
		每进行一次完整的前向渲染，我们都需要渲染该对象的图元，并计算颜色缓冲区和深度缓冲区。	深度缓冲决定一个片元是否可见，如果可见就更新于颜色缓冲区中 的颜色值。
	在unity中前向渲染路径有三个处理光照（即照亮光照）的方式：
		 逐顶点处理 
	     逐像素处理  
		 球谐函数处理
	选择哪种处理光照的方式？
		这个取决于光源的类型（该光源是平行光还是其他类型的光源）和渲染模式（该光源重要不重要），重要的光源会被当成逐像素光源来处理。这些都是在light组件中设置的属性
	unity前向渲染
			当渲染一个物体时，unity会根据光源的设置和这些光源对物体的影响程度对这些光源进行一个重要度的排序，其中一定数目的光源会按照逐像素的方式处理，然后最多四个按照逐顶点方式处理，剩下的
		可以按照SH方式处理
			Unity使用的规则如下：
				平行光和渲染设置为Important的光源会按照逐像素处理，
				渲染被设置为Not Important的光源会按照逐顶点或者SH处理
	   前向渲染的两种pass
			Base Pass
			Additional Pass
